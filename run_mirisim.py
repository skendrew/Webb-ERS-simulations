#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Run a MIRISim simulation for a given exonoodle spectrum
"""

import os
import shutil
import time
import numpy as np
import resource
from functools import wraps
from pdb import set_trace as stop

# JWST imports
from mirisim import MiriSimulation, cdp

from mirisim.skysim import *
from mirisim.config_parser import * # SimConfig, SimulatorConfig, SceneConfig

from multiprocessing import Pool
import glob

import argparse
parser = argparse.ArgumentParser()
parser.add_argument("-s", "--spectrum_filename", help="Spectrum filename (e.g. SED_001.dat)", type=str)
args = parser.parse_args()

# force mirisim to only look for reference files locally
cdp.set_cdp_host_to_local()

def profile(f):
    @wraps(f)  # Keep function name and doc as if the decorator did not exist
    def wrapper(*args, **kwargs):
        """
        Add Total execution time in s and
        memory use in GB to the return of the function.

        """

        start = time.time()
        res = f(*args, **kwargs)
        tot_time = time.time() - start
        memory_use = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss / 1024. ** 3

        print("Runtime: {:.2f} s ({:.2f} GB) ; Pipeline: {} ; args: {}".format(
            tot_time, memory_use, f.__name__, args))

        return res

    return wrapper


@profile
def run_single_mirisim(folder, spectrum_filename):
    """

    :param folder:
    :type folder:
    :param str spectrum_filename: SED spectrum filename, matching the following pattern: SED_001.dat

    :return:
    :rtype:
    """

    spectrum_path = os.path.join(folder, spectrum_filename)

    # Extract Spectrum ID from its filename (e.g. "SED_001.dat" -> "001")
    spectrum_id = os.path.splitext(spectrum_filename)[0].split("_")[1]

    new_dir = "Simulation_{}".format(spectrum_id)

    # We define the Simulation parameters for MIRISIM
    #sim_config = SimConfig.from_default()
    #scene_config = SceneConfig.from_default()
    simulator_config = SimulatorConfig('erssim_simulator.ini')
    # ~ simulator_config = SimulatorConfig.makeSimulator(
        # ~ take_webbPsf=False,
        # ~ include_refpix=False,
        # ~ include_poisson=False,
        # ~ include_readnoise=False,
        # ~ include_badpix=False,
        # ~ include_dark=False,
        # ~ include_flat=False,
        # ~ include_gain=False,
        # ~ include_nonlinearity=False,
        # ~ include_drifts=False,
        # ~ include_latency=False,
        # ~ cosmic_ray_mode='SOLAR_MIN') # SOLAR_MIN, SOLAR_MAX, SOLAR_FLARE, NONE

    # We prepare the scene we want to model
    background = Background(level='low', gradient=0., pa=0.0, centreFOV=(0., 0.))

    SED1 = ExternalSed(sedfile=spectrum_path) #GENERATED BY [exoNoodle package]

    Point1 = Point(Cen=(0.,0.))
    Point1.set_SED(SED1)

    targets = [Point1]

    scene_file = new_dir + '_scene.ini'
    scene_config = SceneConfig.makeScene(loglevel=0, background=background, targets=targets, filename=scene_file)
    

    sim_config = SimConfig.makeSim(name="Default Simulation", rel_obsdate=0.0, scene=scene_file,
    POP='IMA', ConfigPath='LRS_SLITLESS', Dither=False, StartInd=1, NDither=2,
    DitherPat="lrs_recommended_dither.dat",
    filter="P750L", readDetect='SLITLESSPRISM', ima_mode='FAST', ima_exposures=1, ima_integrations=1, ima_frames=65,
    disperser='SHORT', detector='SW', mrs_mode='FAST', mrs_exposures=1, mrs_integrations=1, mrs_frames=1)

    # We run the simulation
    # loglevel : "DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"
    ms = MiriSimulation(sim_config=sim_config, scene_config=scene_config, simulator_config=simulator_config, loglevel='ERROR', local=True)

    ms.run()

    #stop()
    # Change simulation folder name
    
    #new_dir = 'test_wasp43b_sim_{0}'.format(spectrum_filename.split['.'][0])

    # Delete existing folder if needed then name the simulations nicely
    if os.path.isdir(new_dir):
        shutil.rmtree(new_dir)

    os.rename(ms.path_out, new_dir)

def run_parallel_mirisim(folder, nb_proc):
    """

    :param str folder: Folder name containing the SED files
    :param int nb_proc: Number of process to run in parallel

    :return:
    :rtype:
    """

    sed_files = glob.glob(os.path.join(folder, "SED_*.dat"))
    sed_files = sed_files[:6]

    args = [os.path.split(f) for f in sed_files]
    print("\n")
    print('>> MIRISim runing parallel')
    print('    • CPU used : {}'.format(nb_proc))
    print('    • Jobs     : {}'.format(np.size(sed_files)))
    print("\n")
    
    if __name__ == '__main__':
        p = Pool(processes=nb_proc)
        print('    ...', end=" ")
        results = p.starmap(run_single_mirisim, args) #Pyhton3
        print(' Done with success, files {}/'.format("Simulation_X"))


print(" ")
print("--------------------------------------------------------------------------------------------------------------------")
print("                                          -   MIRI-LRS SYNTHETIC DATA GENERATOR   -")
print("                                                   PARALLEL LIGHTCURVE RUN")
print("--------------------------------------------------------------------------------------------------------------------")
print(" Version {} - CEA-Saclay".format(1.0))
print(" ")
print(" ")
start_time = time.time()

exonoodle_simulation = 'exonoodle/wasp43b_ersspectra_finesamp/exonoodle_ersspectra_finesamp_exp1/'

sedfiles = glob.glob(exonoodle_simulation+'*.dat')
fnames = [sf.split('/')[-1] for sf in sedfiles]

for sf in sedfiles[:6]:
    fname = sf.split('/')[-1]
#   run_single_mirisim(exonoodle_simulation, "SED_000.dat")
#    run_single_mirisim(exonoodle_simulation, fname)
    run_parallel_mirisim(exonoodle_simulation, nb_proc=2)

# >>>>> END PRINTS
end_time = time.time()
print("\n")
print("MIRISim run: {:.2g} m".format((end_time - start_time)/60))
print("                                                                                    *** DATA GENERATOR ***   End")
